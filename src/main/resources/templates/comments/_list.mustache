<div id="comments-list">
    {{#commentDtos}}
    <div class="card m-2" id="comments-{{id}}"> <!--해당 아이디는 댓글 삭제할때 호출할떄 사용됨 왜냐하면 해당 전체 div를 지우기 때문-->
        <div class="card-header">
            {{nickname}} <!--닉네임이 적혀 있음 Park, Kim, Choi-->
            <!-- 모달 트리거 버튼 -->
            <button type="button"
                    class="btn btn-sm btn-outline-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#comment-edit-modal"
                    data-bs-id="{{id}}"
                    data-bs-nickname="{{nickname}}"
                    data-bs-body="{{body}}"
                    data-bs-article-id="{{articleId}}">수정</button>  <!--commentDto의 아이디 등등 버튼을 통해서 모달에 있는 데이터를 보낼수 있다.-->

            <!--댓글 삭제 버튼-->
            <button type="button"
                    class="btn btn-sm btn-outline-danger comment-delete-btn"
                    data-comment-id="{{id}}">삭제</button> <!--comment-delete-btn 클래스를 추가했다.-->

        </div>
        <div class="card-body">
            {{body}} <!--닉네임의 내용이 적혀 있음 치킨, 초밥, 샤브샤브 등등-->
        </div>
    </div>
    {{/commentDtos}}
</div>

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">댓글 수정</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!--댓글 수정 폼-->
                <form>
                    <!--닉네임 입력-->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input class="form-control form-control-sm" id="edit-comment-nickname">
                    </div>
                    <!--댓글 본문 입력-->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                    </div>
                    <!--히든 인풋-->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">
                    <!--전송 버튼-->
                    <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--모달 이벤트 처리-->
<script>
{
    //모달 요소 선택
    const commentEidtModal = document.querySelector("#comment-edit-modal");
    //모달 이벤트 감지
    commentEidtModal.addEventListener("show.bs.modal", function(event) {
        //트리거 버튼 선택(수정버튼)
        const triggerBtn = event.relatedTarget;
        //데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-article-id");  //쿼리에 대입되는 변수명이 articleId이다.

        //데이터를 반영
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;    //hidden input value로 저장
        document.querySelector("#edit-comment-article-id").value = articleId;  //hidden input value로 저장
    });
}
{
    //수정 완료 버튼
    const commentUpdateBtn = document.querySelector("#comment-update-btn");
    //클릭 이벤트 감지 및 처리
    commentUpdateBtn.addEventListener("click", function(event) {
        //수정 댓글 객체 생성
        const comment = {
            id : document.querySelector("#edit-comment-id").value,
            nickname : document.querySelector("#edit-comment-nickname").value,
            body : document.querySelector("#edit-comment-body").value,
            article_id : document.querySelector("#edit-comment-article-id").value
        };
        console.log(comment);
        //수정 Rest Api를 호출 -fetch()를 통해서
        //fetch는 url과 객체 블록을 받는다.
        const url = "/api/comments/" + comment.id;
        fetch(url, {
            method : "PATCH",         //PATCH 요청 무조건 대문자
            body : JSON.stringify(comment),  //수정된 댓글 객체를 JSON으로 전달
            headers : {
                "Content-Type" : "application/json"
            }
        }).then(response => {
            //http 응답 코드에 따른 메세지 출력
            const msg = (response.ok) ? "댓글이 수정되었습니다" : "댓글 수정 삭제";
            alert(msg);
            //현재 페이지를 새로고침
            window.location.reload();
        });
    });

}
</script>
<!--댓글 삭제-->
<script>
{
    //삭제 버튼 선택
    const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

    //삭제 버튼 이벤트 처리
    commentDeleteBtns.forEach(btn => {
        //각 버튼의 이벤트 처리를 등록한다.
        btn.addEventListener("click", (event) => { //클릭 이벤트가 발생된 버튼을 가져옴
            //이벤트 발생 요소를 선택(버튼 가져오기)
           const commentDeleteBtn = event.srcElement; //클릭 이벤트가 발생된 버튼을 가져옴

            //삭제 댓글 id 가져오기
            const commentId =commentDeleteBtn.getAttribute("data-comment-id");
            console.log(`삭제 버튼 클릭 : ${commentId}번 댓글`); //삭제 버튼 클릭 : " + commentId + "번 댓글"


            // 삭제 API 호출 및 처리
            const url = `/api/comments/${commentId}` //백틱 숫자 1번 왼쪽 `
            fetch(url, {
                method : "DELETE"

            }).then(response => {
                //댓글 삭제 실패 처리
                if(!response.ok) {
                    alert("댓글 삭제 실패");
                    return ; //삭제 실패하면 fetch메소드 빠져나옴
                }
                //삭제 성공 시 댓글을 화면에서 지움!
                const target = document.querySelector(`#comments-${commentId}`);
                target.remove(); //해당 댓글 바로 지워짐
            });

        });
    });
}

</script>